{"version":3,"sources":["images/loader.gif","serviceWorker.js","reducers/index.js","reducers/contactReducer.js","actions/actionTypes.js","reducers/restaurant.js","store/configureStore.js","actions/restaurant.js","Search.js","actions/city.js","App.js","ListingPage.js","Header.js","routers/AppRouter.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","combineReducers","contacts","state","action","type","length","Object","assign","contact","filter","data","i","id","defaultState","city","restaurants","loader","restaurantReducer","restaurant","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","fetchRestaurants","Search","props","handleChange","bind","handleSubmit","e","preventDefault","this","setState","target","value","dispatch","getState","fetch","then","res","json","result","console","log","error","thunkRestaurants","history","push","className","class","onSubmit","placeholder","name","onChange","required","Component","connect","App","ListingPage","start","src","spinner","alt","map","key","address","price","Header","aria-hidden","to","AppRouter","path","component","exact","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.bbd4ecc8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loader.5177165e.gif\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from 'redux';\nimport contacts from './contactReducer';\n\nexport default combineReducers({\n    contacts: contacts\n});","import * as actionTypes from '../actions/actionTypes';\n\nexport default (state = [], action) => {\n    switch (action.type){\n      case actionTypes.CREATE_NEW_CONTACT:\n          if(state.length>0) state=[];\n      return [\n        ...state,\n        Object.assign({}, action.contact)\n      ];\n      case actionTypes.REMOVE_CONTACT:\n      return state.filter((data, i) => i !== action.id);\n      default:\n            return state;\n    }\n  };","export const GET_ALL_CONTACTS = 'GET_ALL_CONTACTS';\nexport const CREATE_NEW_CONTACT = 'CREATE_NEW_CONTACT';\nexport const REMOVE_CONTACT = 'REMOVE_CONTACT';","const defaultState={\n    city:'', \n    restaurants:[],\n    loader:true\n};\n\nexport const restaurantReducer = (state = defaultState, action) =>{\n    \n    switch(action.type){\n        case 'RESET_STATE':\n            return defaultState;\n\n        case 'SET_CITY':\n            // console.log(\"CITY \"+action.city)\n              return {\n                ...state,\n                city: action.city\n                \n            }\n        case 'FETCH_RESTAURANTS':\n            return {\n                ...state,\n                restaurants:  action.restaurant,\n                loader:action.loader \n            }\n\n        \n        default:\n            // console.log(\"CITY \"+action.city)\n            return state;\n    }\n}","import { createStore, applyMiddleware, compose } from 'redux';\nimport rootReducer from '../reducers';\nimport thunk from 'redux-thunk';\nimport { restaurantReducer } from '../reducers/restaurant';\n\n// export default function configureStore(initialState) {\n//   return createStore(rootReducer, initialState);\n// }\n\nconst composeEnhancers= window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport default () => {\n  const store = createStore(\n                  restaurantReducer,\n                  composeEnhancers(applyMiddleware(thunk))\n  );\n  return store;\n};","\nexport const fetchRestaurants=(restaurant,loader) =>({\n    type: 'FETCH_RESTAURANTS',\n    restaurant,\n    loader\n})\n\nexport const thunkRestaurants =(city='', start=1) =>{\n    return (dispatch, getState) =>{\n        fetch(\"https://opentable.herokuapp.com/api/restaurants?city=\"+city)\n        .then(res => res.json())\n        .then(\n          (result) => {\n              console.log(\"resultAction \"+result.restaurants);\n              dispatch(fetchRestaurants(result.restaurants,false));\n          },\n          // Note: it's important to handle errors here\n          // instead of a catch() block so that we don't swallow\n          // exceptions from actual bugs in components.\n          (error) => {\n              \n            this.setState({\n              \n            });\n          }\n        )        \n        // console.log(\"City \"+city);\n    }\n}","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport {setCity} from './actions/city';\nimport { resetState } from './actions/city';\nimport {thunkRestaurants} from './actions/restaurant';\nimport './styles/Summary.css';\n\n \nclass Search extends Component\n{\n\n  constructor(props){\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.state = {\n      city:'' \n    }\n  }\n\n  handleChange(e){\n     e.preventDefault();\n       this.setState({ city: e.target.value });\n  }\n\n  handleSubmit(e){\n   e.preventDefault();\n  //  console.log(this.state.city);\n   this.props.dispatch(resetState());\n   this.props.dispatch(setCity(this.state.city));\n   this.props.dispatch(thunkRestaurants(this.state.city, 1));\n   this.props.history.push('/listing');\n  }\n\n\n  render() {  \n  return (\n    <div className='content-container content'>\n      <div className='page-header'>\n        <h2 className=\"page-header__title\">Find your restaurant</h2>\n      </div>\n     \n      <div class=\"search-container\">\n       <form onSubmit={this.handleSubmit}>\n        <input type=\"text\" placeholder=\"Search by city\" name=\"city\" onChange={this.handleChange} value={this.state.city} required/>\n        <button type=\"submit\"><i class=\"fa fa-search\"></i></button>\n       </form>\n      </div>\n    </div>\n  )\n  }\n}\n\nexport default connect()(Search);","export const setCity =(city) =>({\n    type: 'SET_CITY',\n    city\n}\n);\n\nexport const resetState = () =>({\n    type: 'RESET_STATE'\n});\n","//import logo from './logo.svg';\nimport './styles/App.css';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as contactAction from './actions/contactAction';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport Search from './Search';\n\n\nconst App = (props) => (\n  <div className=\"App\">  \n    <Search {...props}/>\n  </div>\n)\n\nexport default App;\n","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport spinner from './images/loader.gif';\nimport './styles/Loader.css';\nimport './styles/Summary.css';\nclass ListingPage extends Component {\n\n  constructor(props){\n    super(props);\n    this.state={\n      start : 1,\n      restaurants:[]\n    }\n  }\n\n\n\ncomponentDidMount() {\n\n}\n\n\n\n\n  render() {\n    \n      console.log(\"renderCity \"+this.props.city);\n      console.log(\"renderLength \"+this.props.restaurants.length);\n      // console.log(\"renderLoader \"+this.props.loader);\n    \n    return (\n      <div>\n        {this.props.loader? \n         <div className='loader'>\n         <img src={spinner} alt='loading..'/>\n         </div> :\n         <div>\n           <h3>Restaurants in {this.props.city}</h3>\n           <hr />\n        <ul>\n          {this.props.restaurants.map((restaurant,i) => (\n            <li key={i}>\n              {restaurant.name} --- {restaurant.address} --- {restaurant.price}\n            </li>\n          ))}\n        </ul> \n        </div>\n       }\n      </div>\n    )\n  }\n};\n\nconst mapStateToProps =({restaurants, city, error,loader}, props)=>({\n    restaurants,\n    city,\n    loader\n})\n\nexport default connect(mapStateToProps)(ListingPage);","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport './styles/Header.css';\n\nexport default function Header() {\n  return (\n        <div className='App-name'>\n          <div className='App-symbol'>\n            <i className='fa fa-cutlery fa-2x black' aria-hidden='true' />\n          </div>\n          <div className='App-title'>\n          <Link className='App-title__link'to='/'>\n            <h1>Restaurant Finder</h1>\n          </Link>\n          </div>\n        </div>          \n  )\n};","import React from 'react';\nimport {BrowserRouter, Route, Switch} from 'react-router-dom';\nimport App from '../App';\nimport ListingPage from '../ListingPage';\nimport Header from '../Header';\n// import DetailPage from '../components/DetailPage';\n// import ReviewPage from '../components/ReviewPage';\n// import NotFoundPage from '../components/NotFoundPage';\n\nconst AppRouter =(props) =>(\n    \n    <BrowserRouter >\n\n        <div>\n            <Header/>\n            <Switch>\n                <Route path='/' component={App} exact={true}/>\n                <Route path='/listing' component={ListingPage} />\n                {/* <Route path='/detail/:id' component={DetailPage} />\n                <Route path='/review/:id' component={ReviewPage} />\n                <Route component={NotFoundPage} />  */}\n            </Switch>\n        </div>\n    </BrowserRouter>\n);\n\nexport default AppRouter;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport configureStore from './store/configureStore';\nimport AppRouter from './routers/AppRouter';\n\nconst store = configureStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <AppRouter />\n</Provider>,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}