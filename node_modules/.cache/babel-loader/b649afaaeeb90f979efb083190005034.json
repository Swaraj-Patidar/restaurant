{"ast":null,"code":"import { setError } from \"./error\";\n\nfunction handleErrors(response) {\n  if (!response.ok) {\n    throw Error(response.statusText);\n  }\n\n  return response;\n}\n\nexport const fetchRestaurants = restaurant => ({\n  type: 'FETCH_RESTAURANTS',\n  restaurant\n});\nexport const thunkRestaurants = (city = '', start = 1) => {\n  return (dispatch, getState) => {\n    fetch(\"https://opentable.herokuapp.com/api/restaurants?city=\" + city).then(res => res.json()).then(result => {\n      console.log(\"resultAction \" + result.restaurants);\n      dispatch(fetchRestaurants(result.restaurants));\n    }, // Note: it's important to handle errors here\n    // instead of a catch() block so that we don't swallow\n    // exceptions from actual bugs in components.\n    error => {\n      this.setState({});\n    }); // console.log(\"City \"+city);\n  };\n};","map":{"version":3,"sources":["/home/spatidar/Desktop/React_projects/restaurant/src/actions/restaurant.js"],"names":["setError","handleErrors","response","ok","Error","statusText","fetchRestaurants","restaurant","type","thunkRestaurants","city","start","dispatch","getState","fetch","then","res","json","result","console","log","restaurants","error","setState"],"mappings":"AAAA,SAASA,QAAT,QAAyB,SAAzB;;AAGA,SAASC,YAAT,CAAsBC,QAAtB,EAAgC;AAC5B,MAAI,CAACA,QAAQ,CAACC,EAAd,EAAkB;AACd,UAAMC,KAAK,CAACF,QAAQ,CAACG,UAAV,CAAX;AACH;;AACD,SAAOH,QAAP;AACH;;AAED,OAAO,MAAMI,gBAAgB,GAAEC,UAAD,KAAgB;AAC1CC,EAAAA,IAAI,EAAE,mBADoC;AAE1CD,EAAAA;AAF0C,CAAhB,CAAvB;AAKP,OAAO,MAAME,gBAAgB,GAAE,CAACC,IAAI,GAAC,EAAN,EAAUC,KAAK,GAAC,CAAhB,KAAqB;AAChD,SAAO,CAACC,QAAD,EAAWC,QAAX,KAAuB;AAC1BC,IAAAA,KAAK,CAAC,0DAAwDJ,IAAzD,CAAL,CACCK,IADD,CACMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADb,EAECF,IAFD,CAGGG,MAAD,IAAY;AACRC,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAgBF,MAAM,CAACG,WAAnC;AACAT,MAAAA,QAAQ,CAACN,gBAAgB,CAACY,MAAM,CAACG,WAAR,CAAjB,CAAR;AACH,KANH,EAOE;AACA;AACA;AACCC,IAAAA,KAAD,IAAW;AAET,WAAKC,QAAL,CAAc,EAAd;AAGD,KAfH,EAD0B,CAqB1B;AACH,GAtBD;AAwBH,CAzBM","sourcesContent":["import { setError } from \"./error\";\n\n\nfunction handleErrors(response) {\n    if (!response.ok) {\n        throw Error(response.statusText);\n    }\n    return response;\n}\n\nexport const fetchRestaurants=(restaurant) =>({\n    type: 'FETCH_RESTAURANTS',\n    restaurant\n})\n\nexport const thunkRestaurants =(city='', start=1) =>{\n    return (dispatch, getState) =>{\n        fetch(\"https://opentable.herokuapp.com/api/restaurants?city=\"+city)\n        .then(res => res.json())\n        .then(\n          (result) => {\n              console.log(\"resultAction \"+result.restaurants);\n              dispatch(fetchRestaurants(result.restaurants));\n          },\n          // Note: it's important to handle errors here\n          // instead of a catch() block so that we don't swallow\n          // exceptions from actual bugs in components.\n          (error) => {\n              \n            this.setState({\n              \n            });\n          }\n        )\n\n\n        \n        // console.log(\"City \"+city);\n    }\n\n}"]},"metadata":{},"sourceType":"module"}